import java.awt.Color;
import java.util.HashMap;
import java.util.Map;
import java.util.Map.Entry;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextPane;
import javax.swing.UIDefaults;
import javax.swing.text.BadLocationException;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;
import javax.swing.text.html.HTMLDocument.Iterator;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 ** File GUI.java, Student.java Author: Michelle DeCaire Date: October 15, 2017
 * Purpose: This file is a sample user database it will find, insert, update,
 * and delete users
 * 
 */

public class GUI extends javax.swing.JFrame {

	/**
	 * Creates new form NewJFrame
	 */
	public GUI() {
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {

		majorSelected = new javax.swing.JTextField();
		id = new javax.swing.JLabel();
		idNumber = new javax.swing.JTextField();
		name = new javax.swing.JLabel();
		studentName = new javax.swing.JTextField();
		Major = new javax.swing.JLabel();
		topLabel = new javax.swing.JLabel();
		dropDownBox = new javax.swing.JComboBox<>();
		choice = new javax.swing.JLabel();
		processRequest = new javax.swing.JButton();

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		setTitle("Project 4");

		// text field for major selectd
		majorSelected.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {

			}
		});

		id.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
		id.setText("ID #");

		idNumber.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {

			}
		});

		// name and name text field information
		name.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
		name.setText("Name");

		studentName.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {

			}
		});

		Major.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
		Major.setText("Major");

		// top label
		topLabel.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
		topLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		topLabel.setText("Student Information");
		topLabel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

		// code fro layout and actions of dropdown box
		dropDownBox.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
		dropDownBox.setModel(
				new javax.swing.DefaultComboBoxModel<>(new String[] { "Insert", "Delete", "Find", "Update" }));
		dropDownBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
		dropDownBox.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				dropDownBoxActionPerformed(evt);
			}
		});

		// modification label
		choice.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
		choice.setText("Choose Modification");

		// information for Process Request button
		processRequest.setBackground(new java.awt.Color(102, 102, 255));
		processRequest.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
		processRequest.setText("Process Request");
		processRequest.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				processRequestActionPerformed(evt);
			}
		});

		// Code for the SWing component layout
		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout
				.createSequentialGroup().addContainerGap()
				.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(layout.createSequentialGroup()
								.addComponent(topLabel, javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addContainerGap())
						.addGroup(layout.createSequentialGroup()
								.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addGroup(layout.createSequentialGroup()
												.addComponent(id, javax.swing.GroupLayout.PREFERRED_SIZE, 90,
														javax.swing.GroupLayout.PREFERRED_SIZE)
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 82,
														Short.MAX_VALUE)
												.addComponent(
														idNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 203,
														javax.swing.GroupLayout.PREFERRED_SIZE))
										.addGroup(javax.swing.GroupLayout.Alignment.TRAILING,
												layout.createSequentialGroup().addGroup(layout
														.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING,
																false)
														.addComponent(Major, javax.swing.GroupLayout.DEFAULT_SIZE, 92,
																Short.MAX_VALUE)
														.addComponent(name, javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
														.addPreferredGap(
																javax.swing.LayoutStyle.ComponentPlacement.RELATED,
																javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
														.addComponent(studentName,
																javax.swing.GroupLayout.PREFERRED_SIZE, 203,
																javax.swing.GroupLayout.PREFERRED_SIZE)))
								.addGap(18, 18, 18))
						.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
								.addComponent(choice)
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED,
										javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
										.addComponent(majorSelected).addComponent(dropDownBox, 0, 203, Short.MAX_VALUE))
								.addGap(18, 18, 18))))
				.addGroup(layout.createSequentialGroup().addComponent(processRequest,
						javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addGap(0, 0, Short.MAX_VALUE)));
		layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout
				.createSequentialGroup().addGap(7, 7, 7)
				.addComponent(
						topLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
				.addGap(18, 18, 18)
				.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
						.addComponent(idNumber, javax.swing.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE).addComponent(
								id, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
				.addGap(25, 25, 25)
				.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
						.addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, 20,
								javax.swing.GroupLayout.PREFERRED_SIZE)
						.addComponent(studentName, javax.swing.GroupLayout.PREFERRED_SIZE, 29,
								javax.swing.GroupLayout.PREFERRED_SIZE))
				.addGap(23, 23, 23)
				.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
						.addComponent(Major, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
								Short.MAX_VALUE)
						.addComponent(majorSelected, javax.swing.GroupLayout.PREFERRED_SIZE, 29,
								javax.swing.GroupLayout.PREFERRED_SIZE))
				.addGap(18, 18, 18)
				.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
						.addComponent(choice, javax.swing.GroupLayout.PREFERRED_SIZE, 38,
								javax.swing.GroupLayout.PREFERRED_SIZE)
						.addComponent(dropDownBox, javax.swing.GroupLayout.PREFERRED_SIZE, 29,
								javax.swing.GroupLayout.PREFERRED_SIZE))
				.addGap(28, 28, 28).addComponent(processRequest, javax.swing.GroupLayout.PREFERRED_SIZE, 34,
						javax.swing.GroupLayout.PREFERRED_SIZE)
				.addGap(24, 24, 24)));
		// makes it go to the middle of the screen
		setLocationRelativeTo(null);
		pack();
	}

	// hashmap for database
	HashMap<Integer, Student> studentDatabase = new HashMap<Integer, Student>();

	// selection defaulted to insert
	static String selection = "Insert";
	// Profession color for student info
	Color successColor = new Color(235, 235, 235);
	// static variables for helper methods
	static int letterGrade = 0;
	static int creditHours = 0;

	/**
	 * used to validate student ID and Major text fields
	 * 
	 * @param text
	 * @return return true if the code is invalid
	 */

	private boolean validateInformation(String text) {

		if ((!isAlpha(text)) || text.isEmpty()) {
			return true;
		} else {
			return false;
		}

	}

	/**
	 * validates student ID for all fields
	 * 
	 * @param text
	 * @return
	 */
	private boolean validateNumber(String text) {

		try {
			Integer.parseInt(text);
			return true;

		} catch (NumberFormatException e) {
			showMessage("NOT A NUMBER", " PLEASE ENTER A NUMBER", Color.red, Color.white);

		}
		return false;
	}

	/**
	 * main driver of the program has a switch case for the different selection
	 * options, which come from the main drop down
	 * 
	 * @param evt
	 */
	private void processRequestActionPerformed(java.awt.event.ActionEvent evt) {
		String currentStudentName = studentName.getText();
		String studentMajor = majorSelected.getText();
		String idTemp = idNumber.getText();
		int ID = 0;
		if (validateNumber(idTemp)) {
			ID = Integer.parseInt(idTemp);

		} else {
			return;
		}

		switch (selection) {
		case "Insert":
			// if statements to validate all data
			if (validateInformation(currentStudentName)) {
				showMessage("Invalid Input", " Please enter alpha characters in the student field!", Color.RED,
						Color.white);
				return;
			}
			if (validateInformation(studentMajor)) {
				showMessage("Invalid Input", " Please only enter alpha characters in the major field!", Color.RED,
						Color.white);
				return;
			}
			// makes sure the ID is not in use
			if (findID(ID)) {
				showMessage("ID # In Use", " Please enter a unique student ID#.", Color.red, Color.white);
				return;
			}
			// new student created with name and major
			Student currentStudent = new Student(currentStudentName, studentMajor);
			// and adds them to hashmap
			studentDatabase.put(ID, currentStudent);
			// success popup
			showMessage("Success", currentStudentName + " has been added.", successColor, Color.BLACK);
			// clears the text fields for new input
			clearFields();
			break;

		case "Delete":
			// checks if student exists
			if (!findID(ID)) {
				showMessage("ID not found", " No Such Student in records.", Color.red, Color.white);
				return;
			}
			// removes student from database
			studentDatabase.remove(ID);
			// success message
			showMessage("Success", "This student has succesfully been removed.", Color.blue, Color.WHITE);
			clearFields();
			break;

		case "Find":
			if (!findID(ID)) {
				showMessage("ID not found", " No Such Student in records.", Color.red, Color.white);
				return;
			} else {
				// simply displays student information
				showMessage("Success", studentDatabase.get(ID).toString(), successColor, Color.BLACK);
			}
			clearFields();
			break;

		case "Update":
			if (!findID(ID)) {
				showMessage("ID not found", " No Such Student in records.", Color.red, Color.white);
				return;
			} else {
				// calls methods for pop up drop down menus
				letterGrade = showgradeOption();
				creditHours = getCreditHours();

				// to handle drop down cancel buttons
				if (letterGrade == 20 || creditHours == 0) {
					showMessage("Cancelled", " This update was cancelled.", Color.blue, Color.white);
					return;
				}
				// creates an instance of student to be able to access course completed method
				Student update = studentDatabase.get(ID);
				update.coursesCompleted(letterGrade, creditHours);
				showMessage("Success", "Student's grades have been updated \n" + update.toString(), successColor,
						Color.BLACK);
			}
			clearFields();
			break;
		}

	}

	/**
	 * drop down box for credit hours, try catch to cat null-pointer when user
	 * pushes cancel button
	 * 
	 * @return
	 */
	private int getCreditHours() {
		String[] cHours = { "3", "6" };

		String cHour = (String) JOptionPane.showInputDialog(null, "Choose Credit Hours:", "Credit Hour Options",
				JOptionPane.QUESTION_MESSAGE, null, cHours, cHours[0]);
		int hours = 0;
		try {

			switch (cHour) {
			case "3":
				hours = 3;
				break;
			case "6":
				hours = 6;
				break;
			}

		} catch (NullPointerException e) {
			return 0;
		}
		return hours;
	}

	/**
	 * grade drop down box, converts letter grades into numeric values and returns
	 * try catch to handle cancel button
	 * 
	 * @return
	 */
	private int showgradeOption() {
		String[] letterGrade = { "A", "B", "C", "D", "F" };
		// JFrame frame = new JFrame("Choose Letter Grade");
		String grade = (String) JOptionPane.showInputDialog(null, "Choose Grade:", "Grade Options",
				JOptionPane.QUESTION_MESSAGE, null, letterGrade, letterGrade[0]);
		int gradeAsNum = 4;
		try {
			switch (grade) {
			case "A":
				gradeAsNum = 4;
				break;
			case "B":
				gradeAsNum = 3;
				break;
			case "C":
				gradeAsNum = 2;
				break;
			case "D":
				gradeAsNum = 1;
				break;
			case "F":
				gradeAsNum = 0;
				break;
			}
			return gradeAsNum;

		} catch (NullPointerException E) {
			// this is 20 because I had to pick a number that
			// is not within grade range, so that the calling
			// method can handle the null pointer
			gradeAsNum = 20;
		}
		return gradeAsNum;
	}

	// clears the fields by changing text to empty quotes
	// this is for ease of input
	private void clearFields() {
		idNumber.setText("");
		studentName.setText("");
		majorSelected.setText("");

	}

	/**
	 * makes sure the database does not already contain the ID#
	 * 
	 * @param iD2
	 * @return
	 */
	private boolean findID(int iD2) {
		if (studentDatabase.containsKey(iD2)) {
			return true;
		} else {
			return false;
		}

	}

	/**
	 * regular expression check to make sure string literals are alpha or period
	 * space or en-dash only
	 * 
	 * @param text
	 * @return
	 */
	private Boolean isAlpha(String text) {

		if (text.matches("[a-zA-Z. -]+")) {
			return true;
		} else
			return false;

	}

	/**
	 * create a jPane that displays various pop up messages changes colors and fonts
	 * when appropriate
	 * 
	 * @param title
	 * @param message
	 * @param myColor
	 * @param fontColor
	 */
	private void showMessage(String title, String message, Color myColor, Color fontColor) {

		JFrame frame = new JFrame(title);
		frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

		Color myC = myColor;
		// text pane to center text and handle
		// new lines
		JTextPane tPane = new JTextPane();
		StyledDocument doc = tPane.getStyledDocument();
		SimpleAttributeSet center = new SimpleAttributeSet();
		StyleConstants.setAlignment(center, StyleConstants.ALIGN_CENTER);

		// paints the background of the panel
		UIDefaults defaults = new UIDefaults();
		defaults.put("TextPane[Enabled].backgroundPainter", myC);
		tPane.putClientProperty("Nimbus.Overrides", defaults);
		tPane.putClientProperty("Nimbus.Overrides.InheritDefaults", true);
		tPane.setBackground(myC);

		doc.setParagraphAttributes(0, doc.getLength(), center, false);
		frame.getContentPane().add(tPane);
		try {
			doc.insertString(0, "\n" + "\n" + message, center);
		} catch (BadLocationException e) {
			e.printStackTrace();
		}

		// changes background & font color
		tPane.setOpaque(true);
		tPane.setForeground(fontColor);
		tPane.setFont(new java.awt.Font("Times New Roman", 1, 16));

		// Display the window.
		frame.setSize(450, 200);
		frame.setVisible(true);
		frame.setLocationRelativeTo(null);

	}

	/**
	 * what needs to be selected from drop down box
	 * 
	 * @param evt
	 */
	private void dropDownBoxActionPerformed(java.awt.event.ActionEvent evt) {
		JComboBox cb = (JComboBox) evt.getSource();
		selection = cb.getSelectedItem().toString();

	}

	/**
	 * @param args
	 *            the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		// <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
		// (optional) ">
		/*
		 * If Nimbus (introduced in Java SE 6) is not available, stay with the default
		 * look and feel. For details see
		 * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		// </editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new GUI().setVisible(true);
			}
		});
	}

	// Variables declaration - do not modify
	private javax.swing.JLabel Major;
	private javax.swing.JLabel choice;
	private javax.swing.JComboBox<String> dropDownBox;
	private javax.swing.JLabel id;
	private javax.swing.JTextField idNumber;
	private javax.swing.JTextField majorSelected;
	private javax.swing.JLabel name;
	private javax.swing.JButton processRequest;
	private javax.swing.JTextField studentName;
	private javax.swing.JLabel topLabel;
	// End of variables declaration
}
